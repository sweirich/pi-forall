module Lec1 where

-- examples with the identity function

id : (y :Type) -> (x:y) -> y
id = \y.\x.x

ex0 : (z: (y :Type) -> (x:y) -> y) -> ( (y :Type) -> (x:y) -> y)
ex0 = id ((y :Type) -> (x:y) -> y)

ex : (y :Type) -> (x:y) -> y
ex = id ((y :Type) -> (x:y) -> y) id

-- Church encoding of booleans

bool : Type
bool = (x : Type) -> x -> x -> x

true : bool
true = \x . \y. \z. y
	 
false : bool
false = \x. \y. \z. z

-- Church encoding of 'and'

and : Type -> Type -> Type
and = \p. \q. (c: Type) -> (p -> q -> c) -> c

conj : (p:Type) -> (q:Type) -> p -> q -> and p q
conj = \p.\q. \x.\y. \c. \f. f x y

proj1 : (p:Type) -> (q:Type) -> and p q -> p
proj1  = \p. \q. \a. a p (\x.\y.x)

proj2 : (p:Type) -> (q:Type) -> and p q -> q
proj2  = \p. \q. \a. a q (\x.\y.y)

and_commutes : (p:Type) -> (q:Type) -> and p q -> and q p
and_commutes = \p. \q. \a. conj q p (proj2 p q a) (proj1 p q a)


{- and_commutes = \p. \q. \a. a (and q p) (\x.\y. conj q p y x) -}












