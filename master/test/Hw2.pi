module Hw2 where


-- show that propositional equality is transitive 

trans : (A:Type) -> (x:A) -> (y:A) -> (z:A) -> (x = z) -> (z = y) -> (x = y)
trans = {- SOLN DATA -} \A x y z pf1 pf2 . 
  subst pf1 by pf2 {- STUBWITH TRUSTME -}


-- properties of booleans

-- an encoding of logical falsity
void : Type 
void = (A:Type) -> A

neg : Type -> Type
neg = \ A . ( (A) -> void )

not : Bool -> Bool 
not = \ x . if x then False else True

-- to be or not to be, that is the question

not_not_equal : (b : Bool) -> (b = not b) -> void
not_not_equal = {- SOLN DATA -} \b pf. 
  if b then (contra pf) else (contra pf) {- STUBWITH TRUSTME -}


not_false_then_true : (b : Bool) -> neg (b = False) -> b = True
not_false_then_true = {- SOLN DATA -} \b nb. 
  if b then refl else nb refl (b = True) {- STUBWITH TRUSTME -}

-- showing that decidable equality is correct.

eq_bool : Bool -> Bool -> Bool
eq_bool = \x y. if x then y else not y

eq_true : (b1 : Bool) -> (b2 : Bool) -> eq_bool b1 b2 = True -> (b1 = b2)
eq_true = \b1 b2 pf. {- SOLN DATA -}
  if b1 then if b2 then refl else contra pf
  		  else if b2 then contra pf else refl {- STUBWITH TRUSTME -}

eq_false : 	(b1 : Bool) -> (b2 : Bool) -> eq_bool b1 b2 = False -> (b1 = b2) -> void
eq_false = {- SOLN DATA -} \ b1 b2 pf1 pf2 .
  if b1 then if b2 then contra pf1 else contra pf2
        else if b2 then contra pf2 else contra pf1 {- STUBWITH TRUSTME -}

false_eq_bool : (n : Bool) -> (m : Bool) ->
     neg (n = m) ->
     eq_bool n m = False
false_eq_bool = \n m nnm. {- SOLN DATA -}
   if n then if m then nnm refl (eq_bool n m = False)
                  else refl
        else if m then refl
                  else nnm refl (eq_bool n m = False) {- STUBWITH TRUSTME -}





