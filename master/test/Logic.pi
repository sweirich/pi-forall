module Logic where

-- products (conjunctions)
---------------------------

data And (A : Type) (B : Type) : Type where
  Conj of (_ : A) (_ : B)

proj1 : [A:Type] -> [B : Type] -> And A B -> A 
proj1 = \ [A] [B] p . case p of
  Conj x y -> x

proj2 : [A:Type] -> [B : Type] -> And A B -> B
proj2 = \ [A] [B] p . case p of
  Conj x y -> y

and_comm : [A : Type] -> [B : Type] -> And A B -> And B A
and_comm = \ [A][B] ab . case ab of 
                 (Conj x y) -> Conj y x

and_assoc : [A : Type] -> [B : Type] -> [C : Type] -> And A (And B C) -> And (And A B) C
and_assoc = \[A][B][C] abc . 
   case abc of 
     Conj a bc -> case bc of 
                   Conj b c -> Conj (Conj a b) c

-- if and only if
-----------------

iff : (A : Type) -> (B : Type) -> Type 
iff = \ A B . And (A -> B) (B -> A)

iff_implies : [A : Type] -> [B : Type] -> iff A B -> A -> B
iff_implies = \[A][B] iff. proj1 [A -> B][B -> A] iff

iff_sym : [A : Type] -> [B : Type] -> iff A B -> iff B A
iff_sym = \ [A][B] iff. 
  case iff of 
     Conj ab ba -> Conj ba ab

iff_refl : [A : Type] -> iff A A
iff_refl = \[A]. Conj (\x . x) (\x . x)

iff_trans : [A : Type] -> [B : Type] -> [C : Type] -> (iff A B) -> (iff B C) -> (iff A C)
iff_trans = \ [A] [B] [C] iff1 iff2 . 
  case iff1 of 
    Conj ab ba -> 
      case iff2 of 
         Conj bc cb -> 
            Conj (\x. bc (ab x)) (\x. (ba (cb x)))

-- Disjunction (Logical "or"), aka sums 
---------------------------------------

data Either (A : Type) (B : Type) : Type where
  Inl of (A)
  Inr of (B)

or_commut : [A : Type] -> [B : Type] -> Either A B -> Either B A
or_commut = \ [A][B] ab . case ab of 
                 Inl a -> Inr a 
                 Inr b -> Inl b

or_distributes_over_and_1 : [P:Type] -> [Q:Type] -> [R:Type] -> 
   Either P (And Q R) -> And (Either P Q) (Either P R)
or_distributes_over_and_1 = \[P][Q][R] e. 
   case e of 
      Inl p  -> Conj (Inl p) (Inl p)
      Inr qr -> case qr of 
                  (Conj q r) -> Conj (Inr q) (Inr r)

or_assoc : [A : Type] -> [B : Type] -> [C : Type] -> Either A (Either B C) -> Either (Either A B) C
or_assoc = \[A][B][C] abc . case abc of 
     Inl a -> Inl (Inl a)
     Inr bc -> case bc of 
        Inl b -> Inl (Inr b)
        Inr c -> Inr c

-- Falsehood
------------

data Void : Type where {}   -- no constructors

-- aka ex_falso_quolibet
false_elim : [P:Type] -> Void -> P
false_elim = \ [P] v . case v of {}


-- Negation
-----------

neg : Type -> Type
neg = \ x . (x -> Void)

not_false : neg Void
not_false = \x. x

contradiction_implies_anything : [P:Type] -> [Q:Type] -> And P (neg P) -> Q 
contradiction_implies_anything = \[P][Q] and . 
   case and of 
     Conj p notp -> false_elim [Q] (notp p)

double_neg : [P:Type] -> P -> neg (neg P)
double_neg = \[P] p. 
  \x. x p

contrapositive : [P:Type] -> [Q:Type] -> (P -> Q) -> neg Q -> neg P
contrapositive = \[P][Q] pq nq p. nq (pq p)

not_both_true_and_false : [P:Type] -> [Q:Type] -> neg (And P (neg P))
not_both_true_and_false = \[P][Q] andpnp. 
  case andpnp of 
    (Conj p np) -> np p

iff_neg_false : [A : Type] -> iff (neg A) (iff A Void)
iff_neg_false = \ [A] . Conj (\ x . Conj x (\y. false_elim [A] y)) (proj1 [A -> Void][Void -> A])

                                  

