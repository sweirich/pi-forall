-----------------------------------------------------------------------
-- The Pi standard library
--
-- Products  (excerpted and ported from Product.agda)
------------------------------------------------------------------------

module Product where

import Equality

data Sig (A:Type)(B: A -> Type) : Type where
  Prod of (x:A) (B x)

proj1 : [A:Type] -> [B:A -> Type] -> Sig A B -> A 
proj1 = \[A][B] x . case x of 
  Prod x y -> x

proj2 : [A:Type] -> [B:A -> Type] -> (x : Sig A B) -> B (proj1[A][B] x)
proj2 = \[A][B] x . case x of 
  Prod z y -> y

{-
injectivity1 : [A:Type] -> [B:A -> Type] -> (x1 : A) -> (y1 : B x1)
				 -> (x2 : A) -> (y2 : B x2) 
				 -> ((Prod x1 y1 : Sig A B) = Prod x2 y2) -> x1 = x2
injectivity1 = \[A][B] x1 y1 x2 y2 eq .
	 let f1 = (refl : proj1 [A][B] (Prod x1 y1) = x1) in
	 let f2 = (refl : proj1 [A][B] (Prod x2 y2) = x2) in
	 let p1 = (subst refl by eq : proj1 [A][B] (Prod x1 y1) = proj1 [A][B] h) in
	 let p2 = (subst p1 by f1  : h = proj1 [A][B] (Prod x2 y2)) in
	 subst p2 by f2

-- because of the dependency between the first and second components of 
-- the pair, we can only decompose the equality when the first components are 
-- already identical.
injectivity2 : [A:Type] -> [B:A -> Type] -> (x : A) -> (y1 : B x)
				 -> (y2 : B x) 
				 -> ((Prod x y1 : Sig A B) = Prod x y2) -> y1 = y2
injectivity2 = \[A][B] x y1 y2 eq.
	 let f1 = (refl : (proj2 [A][B] (Prod x y1) : B x) = y1) in
	 let f2 = (refl : proj2 [A][B] (Prod x y2) = y2) in
	 let p1 = subst refl by eq at h. proj2 [A][B] (Prod x y1) = proj2 [A][B] h in
	 let p2 = subst p1 by f1 at h. (h : B x) = proj2 [A][B] (Prod x y2) in
	 subst p2 by f2 at h. y1 = h
-}

curry : [A:Type] -> [B:A -> Type] -> [C : Sig A B -> Type] -> 
        ((p : Sig A B) -> C p) ->
		  ((x: A)  -> (y : B x) -> C (Prod x y))
curry = \ [A][B][C] f x y . f (Prod x y) 

uncurry : [A:Type] -> [B:A -> Type] -> [C : Sig A B -> Type] -> 
        ((x: A)  -> (y : B x) -> C (Prod x y)) ->
        ((p : Sig A B) -> C p) 
uncurry = \ [A][B][C] f p . case p of 
              Prod x y -> f x y 

---------------------------------------------------
-- Erased first component

data Exists (A:Type)(B: A -> Type) : Type where
  Prod of [x:A](B x)

-- can't define the first projections for this type

-- eproj1 : [A:Type] -> [B:A -> Type] -> Exists A B -> A 
-- eproj1 = \[A][B] x . case x of 
--   Prod x y -> x

eproj2 : [A:Type] -> [B:A -> Type] -> (x : Sig A B) -> 
   B (case x of { Prod x y -> x })
eproj2 = \[A][B] x . case x of 
  Prod x y -> y


---------------------------------------------------
-- Erased second component

data Refine (A:Type) (B : A -> Type) : Type where
  Prod of (x:A)[y:B x]

rproj1 : [A:Type] -> [B:A -> Type] -> Refine A B -> A 
rproj1 = \[A][B] x . case x of 
  Prod x y -> x

---------------------------------------------------
-- Non-dependent version 

Times : Type -> Type -> Type
Times = \ A B . Sig A (\x . B)

prod : [A:Type] -> [B:Type] -> A -> B -> Times A B
prod = \ [A] [B] x y . Prod x y

swap : [A:Type] -> [B:Type] -> Times A B -> Times B A
swap = \ [A][B] p . case p of 
           Prod x y -> Prod y x

{-
injectivity2' : [A:Type] -> [B: Type]
				 -> (x1 : A) -> (y1 : B)
				 -> (x2 : A) -> (y2 : B) 
				 -> ((Prod x1 y1 : Times A B) = Prod x2 y2) -> (y1 = y2)
injectivity2' = \[A][B] x1 y1 x2 y2 eq.
	 let f1 = (refl : proj2 [A][\x. B] (Prod x1 y1) = y1) in
	 let f2 = (refl : proj2 [A][\x. B] (Prod x2 y2) = y2) in
	 let p1 = subst refl by eq 
             at h. proj2 [A][\x. B] (Prod x1 y1) = proj2 [A][\x. B] h in
	 let p2 = subst p1 by f1 at h. (h : B) = proj2 [A][\x. B] (Prod x1 y2) in
	 subst p2 by f2 at h. y1 = h

uncurry' :  [A:Type] -> [B:Type] -> [C : Times A B -> Type] -> 
        ((x: A)  -> (y : B) -> C (Prod x y)) ->
        ((p : Times A B) -> C p) 
uncurry' = \[A][B]. uncurry [A][\x.B] 
-}

