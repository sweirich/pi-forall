module Hw2 where


-- show that propositional equality is transitive 

trans : (A:Type) -> (x:A) -> (y:A) -> (z:A) -> (x = z) -> (z = y) -> (x = y)
trans = TRUSTME


-- properties of booleans

-- an encoding of logical falsity
void : Type 
void = (A:Type) -> A

neg : Type -> Type
neg = \ A . ( (A) -> void )

not : Bool -> Bool 
not = \ x . if x then False else True

-- to be or not to be, that is the question

not_not_equal : (b : Bool) -> (b = not b) -> void
not_not_equal = TRUSTME


not_false_then_true : (b : Bool) -> neg (b = False) -> b = True
not_false_then_true = TRUSTME

-- showing that decidable equality is correct.

eq_bool : Bool -> Bool -> Bool
eq_bool = \x y. if x then y else not y

eq_true : (b1 : Bool) -> (b2 : Bool) -> eq_bool b1 b2 = True -> (b1 = b2)
eq_true = \b1 b2 pf. TRUSTME

eq_false : 	(b1 : Bool) -> (b2 : Bool) -> eq_bool b1 b2 = False -> (b1 = b2) -> void
eq_false = TRUSTME

false_eq_bool : (n : Bool) -> (m : Bool) ->
     neg (n = m) ->
     eq_bool n m = False
false_eq_bool = \n m nnm. TRUSTME





